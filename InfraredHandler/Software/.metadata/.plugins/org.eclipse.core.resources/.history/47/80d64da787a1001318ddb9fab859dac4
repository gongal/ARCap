/*
 * InfaredHandler.cpp
 *
 *  Created on: 2014-02-28
 *      Author: Kenan Kigunda
 */

#include <stdio.h>
#include "InfraredHandler.h"

// ALLOCATION
InfraredHandler::InfraredHandler() {}
InfraredHandler::~InfraredHandler() {}

// INITIALIZATION

/* A mock implemementation of InfraredHandler::init, for testing. */
InfraredStatus InfraredHandler::init() {
	return INFRARED_OK;
}

/*
 * Initializes the infrared handler.
 * @return INFRARED_OK if the handler is initialized without errors
 */
//int InfraredHandler::init() {
//	// Open the ADC.
//	adc_dev = alt_up_de0_nano_adc_open_dev(ADC_NAME);
//	if (adc_dev == NULL) {
//		return INFRARED_ERR;
//	} else {
//		return INFRARED_OK;
//	}
//}

// INFRARED RECEIVERS

/*
 * Updates the infrared status by checking all receivers.
 * @return INFRARED_OK if the infrared status is accepted by all listeners
 */
InfraredStatus InfraredHandler::update() {
	return onInfraredReceive(read(1));
}

/* A mock implementation of InfraredHandler::read, for testing. */
unsigned int InfraredHandler::read(int channel) {
	return 10;
}

///* Reads the level of the given receive channel. */
//unsigned int InfraredHandler::read(int channel) {
//	unsigned int level = alt_up_de0_nano_adc_read(adc_dev, channel);
//	printf("InfraredHandler [channel: %d, level: %u] ", channel, level);
//	return level;
//}

/*
 * Updates all listeners on infrared receive events.
 * @param level - the level read by the infrared receivers
 * @return INFRARED_OK if all listeners accept the receive event
 */
InfraredStatus InfraredHandler::onInfraredReceive(unsigned int level) {
	InfraredStatus overall = INFRARED_OK, current;
	for (list<OS_EVENT *>::iterator it = listeners.begin(); it != listeners.end(); ++it) {
		// Post the infrared receive event to the listener queue.
		current = (*it)->onInfraredReceive(level);
		// Update the overall status.
		if ((overall == INFRARED_OK) && (current == INFRARED_ERR)) {
			overall = INFRARED_ERR;
		}
	}
	return overall;
}


